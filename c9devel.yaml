---
# c9devel.yaml - playbook for creating a LinuxJedi devel bastion from
# a LinuxJedi base image created with `linuxjedi-amis`
- hosts: all
  connection: local
  gather_facts: false
  tasks:
  - fail: msg="This playbook requires '-e target=<targethost>'"
    when: target is undefined

- hosts: "{{ target }}"
  name: Set vars and wait for DNS
  connection: local
  tasks:
  - name: Set mountpoints for a Cloud9 developer instances
    set_fact:
      mount_points:
      - dir_name: home
        mount_point: /home
      - dir_name: www
        mount_point: /var/www
      - dir_name: httpconf
        mount_point: /etc/httpd/conf.d
      - dir_name: ssl
        mount_point: /etc/pki
  # Make sure ansible will connect to the correct host
  - name: Waiting for DNS to sync
    command: echo
    until: "lookup('dig', ansible_host ) == ec2_private_ip_address or lookup('dig', ansible_host ) == ec2_ip_address"
    retries: 60
    delay: 7
    changed_when: false
    when: ec2_ip_address is defined
  - name: Wait for SSH
    wait_for: host={{ ansible_host }} port=22 search_regex=OpenSSH

# Generate new host keys or restore previous
- hosts: "{{ target }}"
  name: Re-use old host keys or store new ones
  become: yes
  tasks:
  - local_action: stat path="files/hostkeys/{{ inventory_hostname }}.tar.gz"
    register: hkeys
  - block:
    - name: Create archive of host keys
      shell: tar czf /tmp/{{ inventory_hostname }}-keys.tar.gz ssh_host_*
      args:
        chdir: /etc/ssh
    - name: Fetch host keys
      fetch: src=/tmp/{{ inventory_hostname }}-keys.tar.gz dest=files/hostkeys/{{ inventory_hostname }}.tar.gz flat=yes
    when: hkeys.stat is defined and not hkeys.stat.exists
  - block:
    - name: Restore host keys
      unarchive: src=files/hostkeys/{{ inventory_hostname }}.tar.gz dest=/etc/ssh
    - name: Restart SSH to read host keys
      service: name=sshd state=restarted
    when: hkeys.stat is defined and hkeys.stat.exists

# platform-specific definitions including data volumes
- name: Set platform-specific variables
  import_playbook: platform-vars.yaml

- hosts: dist_Fedora_28:&{{ target }}
  name: Specialized updates for Fedora supporting Greenfield
  become: yes
  tasks:
  - name: RPMFusion repository
    dnf:
      name:
      - https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-28.noarch.rpm
      state: present
  - name: RPMFusion RPM key
    rpm_key:
      state: present
      key: https://rpmfusion.org/keys?action=AttachFile&do=get&target=RPM-GPG-KEY-rpmfusion-free-fedora-28
  - name: Extra packages
    dnf:
      name:
      - make
      - gcc-c++
      - cmake
      - gstreamer1
      - gstreamer1-plugins-base
      - gstreamer1-plugins-good
      - gstreamer1-plugins-ugly
      - gstreamer1-devel
      - gstreamer1-plugins-base-devel
      - java-1.8.0-openjdk-headless
      state: latest

# - hosts: dist_Amazon_2:&{{ target }}
#   name: Packages for Amazon Linux 2 supporting Greenfield
#   become: yes
#   tasks:
#   - name: RPMFusion repository for CentOS7
#     yum:
#       name:
#       - https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm
#   - name: Install RPMFusion signing key
#     rpm_key:
#       state: present
#       key: /etc/pki/rpm-gpg/RPM-GPG-KEY-rpmfusion-free-el-7
#   - name: Extra packages
#     yum:
#       name:
#       - gcc-c++
#       - cmake
#       - gstreamer1
#       - gstreamer1-plugins-base
#       - gstreamer1-plugins-good
#       - gstreamer1-plugins-ugly
#       - gstreamer1-devel
#       - gstreamer1-plugins-base-devel
#       - java-1.8.0-openjdk-headless
#       state: latest

- hosts: "{{ target }}"
  name: Set up data volume and users
  become: yes
  tasks:
  - name: Data Volume role
    import_role:
      name: data_vol_single
  - name: Create Users role
    import_role:
      name: ansible-users
  - name: Copy Cloud9 Install script
    copy:
      src: files/c9install.sh
      dest: /usr/local/bin/c9install.sh
      mode: 0755
  - name: Install Cloud9 for Users
    become_user: "{{ item.username }}"
    command: /usr/local/bin/c9install.sh
    args:
      creates: "/home/{{ item.username }}/.c9"
    when: item.programmer is defined
    with_items: "{{ users }}"
  - name: Create User .ssh directory
    file:
      path: "/home/{{ item.username }}/.ssh"
      owner: "{{ item.username }}"
      group: "{{ item.username }}"
      state: directory
      mode: 0700
    with_items: "{{ users }}"
  - name: Install the User's SSH private key
    copy:
        src: "files/{{ item.username }}/id_rsa"
        dest: "/home/{{ item.username }}/.ssh/id_rsa"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: 0600
    with_items: "{{ users }}"
  - name: Install the User's SSH public key
    copy:
        src: "files/{{ item.username }}/id_rsa.pub"
        dest: "/home/{{ item.username }}/.ssh/id_rsa.pub"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: 0644
    with_items: "{{ users }}"
  - name: Install the User's SSH config
    copy:
        src: "files/{{ item.username }}/ssh-config"
        dest: "/home/{{ item.username }}/.ssh/config"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: 0600
    with_items: "{{ users }}"

- hosts: "{{ target }}"
  become: yes
  tasks:
  - name: Hostname
    hostname: name={{ ansible_ssh_host }}
  - name: Hosts file
    lineinfile: dest=/etc/hosts regexp='^127\.0\.0\.1' line='127.0.0.1 {{ ansible_ssh_host }} localhost.localdomain localhost'
  - name: sysconfig network
    lineinfile: 'dest=/etc/sysconfig/network regexp="^HOSTNAME=" line="HOSTNAME={{ ansible_ssh_host }}"'

- hosts: "{{ target }}"
  name: Remove build user authorized keys
  become: yes
  tasks:
  - file:
      path: /build/.ssh/authorized_keys
      state: absent
  - user:
      name: build
      state: absent
      force: yes
